~/5_15_136/Linux_for_Tegra/

git log 			看记录
git checkout + 记录码  	回滚
git checkout -b CC1 		添加 branch
git branch -d CC1  		删除 branch


~/Linux_for_Tegra/source
没有添加patch
看看能不能在 theia 上 config 一个带有 oot module 的 rt kernel
将Image, dtb, modules 上传到 orin , 再 L4T reboot 看能不能 ping orin

export ARCH=arm64
export CROSS_COMPILE=aarch64-linux-gnu-


-b 1: 

export ARCH=arm64
export CROSS_COMPILE=aarch64-linux-gnu-
NO patch
!!! 无法 make modules. 无法添加 oot modules
Error 见 /home/jiajia/Desktop/MA/pdf/txt/errors/1.txt
—————————————————————————————————————————————————————



-b 2: 

export CROSS_COMPILE=$HOME/l4t-gcc/aarch64--glibc--stable-2022.08-1/bin/aarch64-buildroot-linux-gnu-
No patch

!!! 可以编译 oot modules



--------------------------------------------------------------------------------------------------------------------
export CROSS_COMPILE=aarch64-linux-gnu- 不带patch, 最原始的kernel 连oou modules 都编译不了。必须使用官方推荐的编译器。
--------------------------------------------------------------------------------------------------------------------




-------------------------------------------------------------
~/5_15_136/withPatch
-------------------------------------------------------------

从 noPatch/ 中copy 了 .config 文件
先 make oldconfig 再 make menuconfig 并 disable virtualization 和 modeversions

cd ~/5_15_136/withPatch/Linux_for_Tegra/source


export CROSS_COMPILE=$HOME/l4t-gcc/aarch64--glibc--stable-2022.08-1/bin/aarch64-buildroot-linux-gnu-
export ARCH=arm64
export INSTALL_MOD_PATH=/home/jiajia/5_15_136/withPatch/Linux_for_Tegra/rootfs/
export KERNEL_HEADERS=$PWD/kernel/kernel-jammy-src


./generic_rt_build.sh "enable"
make -C kernel/kernel-jammy-src -j $(nproc) LOCALVERSION=-rt-tegra 2>&1 | tee build_log.txt


make install -C kernel
export IGNORE_PREEMPT_RT_PRESENCE=1
make modules	(build oot modules)
make modules_install


cd ~/5_15_136/withPatch/Linux_for_Tegra/source/hardware/nvidia/t23x/nv-public/
vi tegra234-p3737-0000+p3701-0000.dts 
添加jailhouse位置：

reserved-memory {
		#address-cells = <2>;
		#size-cells = <2>;
		ranges;

		jailhouse@c0000000  {
			no-map;
			reg = <0x0 0xc0000000 0x0 0x08000000>;
		};
	};


cd ~/5_15_136/withPatch/Linux_for_Tegra/source
make dtbs

全部拷贝到 sam:

scp /home/jiajia/5_15_136/withPatch/Linux_for_Tegra/source/nvidia-oot/device-tree/platform/generic-dts/dtbs/tegra234-p3737-0000+p3701-0000-nv.dtb jiajia@sam:/home/jiajia/

scp /home/jiajia/5_15_136/withPatch/Linux_for_Tegra/source/kernel/kernel-jammy-src/arch/arm64/boot/Image jiajia@sam:/home/jiajia/

scp -r /home/jiajia/5_15_136/withPatch/Linux_for_Tegra/rootfs/lib/modules/5.15.122-rt-tegra/ jiajia@sam:/home/jiajia/



放到orin上：

scp tegra234-p3737-0000+p3701-0000-nv.dtb nvidia@orin:/home/nvidia/
scp Image nvidia@orin:/home/nvidia/
scp -r 5.15.122-rt-tegra/ nvidia@orin:/home/nvidia/



sudo mv Image /boot/
sudo mv tegra234-p3737-0000+p3701-0000.dtb /boot/dtb/
sudo mv 5.15.122-rt-tegra/ /lib/modules/

cd /boot/dtb/
sudo cp tegra234-p3737-0000+p3701-0000.dtb kernel_tegra234-p3737-0000+p3701-0000-nv.dtb

-----------------------------------------------------------------------------------------------------











-------------------------------------------------------------
~/5_15_136/noPatch
-------------------------------------------------------------
cd ~/5_15_136/withPatch/Linux_for_Tegra/source
export CROSS_COMPILE=$HOME/l4t-gcc/aarch64--glibc--stable-2022.08-1/bin/aarch64-buildroot-linux-gnu-
export ARCH=arm64
export INSTALL_MOD_PATH=/home/jiajia/5_15_136/noPatch/Linux_for_Tegra/rootfs/
export KERNEL_HEADERS=$PWD/kernel/kernel-jammy-src

全部 compile 完成
## --> 将 Image dtb modules 放到 orin 上可以 ping !!!




































jiajia@theia:~/5_15_136/withPatch/Linux_for_Tegra/source/kernel/kernel-jammy-src$ make help
Cleaning targets:
  clean		  - Remove most generated files but keep the config and
                    enough build support to build external modules
  mrproper	  - Remove all generated files + config + various backup files
  distclean	  - mrproper + remove editor backup and patch files

Configuration targets:
  config	  - Update current config utilising a line-oriented program
  nconfig         - Update current config utilising a ncurses menu based program
  menuconfig	  - Update current config utilising a menu based program
  xconfig	  - Update current config utilising a Qt based front-end
  gconfig	  - Update current config utilising a GTK+ based front-end
  oldconfig	  - Update current config utilising a provided .config as base
  localmodconfig  - Update current config disabling modules not loaded
                    except those preserved by LMC_KEEP environment variable
  localyesconfig  - Update current config converting local mods to core
                    except those preserved by LMC_KEEP environment variable
  defconfig	  - New config with default from ARCH supplied defconfig
  savedefconfig   - Save current config as ./defconfig (minimal config)
  allnoconfig	  - New config where all options are answered with no
  allyesconfig	  - New config where all options are accepted with yes
  allmodconfig	  - New config selecting modules when possible
  alldefconfig    - New config with all symbols set to default
  randconfig	  - New config with random answer to all options
  yes2modconfig	  - Change answers from yes to mod if possible
  mod2yesconfig	  - Change answers from mod to yes if possible
  listnewconfig   - List new options
  helpnewconfig   - List new options and help text
  olddefconfig	  - Same as oldconfig but sets new symbols to their
                    default value without prompting
  tinyconfig	  - Configure the tiniest possible kernel
  testconfig	  - Run Kconfig unit tests (requires python3 and pytest)

Other generic targets:
  all		  - Build all targets marked with [*]
* vmlinux	  - Build the bare kernel
* modules	  - Build all modules
  modules_install - Install all modules to INSTALL_MOD_PATH (default: /)
  dir/            - Build all files in dir and below
  dir/file.[ois]  - Build specified target only
  dir/file.ll     - Build the LLVM assembly file
                    (requires compiler support for LLVM assembly generation)
  dir/file.lst    - Build specified mixed source/assembly target only
                    (requires a recent binutils and recent build (System.map))
  dir/file.ko     - Build module including final link
  modules_prepare - Set up for building external modules
  tags/TAGS	  - Generate tags file for editors
  cscope	  - Generate cscope index
  gtags           - Generate GNU GLOBAL index
  kernelrelease	  - Output the release version string (use with make -s)
  kernelversion	  - Output the version stored in Makefile (use with make -s)
  image_name	  - Output the image name (use with make -s)
  headers_install - Install sanitised kernel headers to INSTALL_HDR_PATH
                    (default: ./usr)

Static analysers:
  checkstack      - Generate a list of stack hogs
  versioncheck    - Sanity check on version.h usage
  includecheck    - Check for duplicate included header files
  export_report   - List the usages of all exported symbols
  headerdep       - Detect inclusion cycles in headers
  coccicheck      - Check with Coccinelle
  clang-analyzer  - Check with clang static analyzer
  clang-tidy      - Check with clang-tidy

Tools:
  nsdeps          - Generate missing symbol namespace dependencies

Kernel selftest:
  kselftest         - Build and run kernel selftest
                      Build, install, and boot kernel before
                      running kselftest on it
                      Run as root for full coverage
  kselftest-all     - Build kernel selftest
  kselftest-install - Build and install kernel selftest
  kselftest-clean   - Remove all generated kselftest files
  kselftest-merge   - Merge all the config dependencies of
		      kselftest to existing .config.

Devicetree:
* dtbs             - Build device tree blobs for enabled boards
  dtbs_install     - Install dtbs to /boot/dtbs/
  dt_binding_check - Validate device tree binding documents
  dtbs_check       - Validate device tree source files

Userspace tools targets:
  use "make tools/help"
  or  "cd tools; make help"

Kernel packaging:
  rpm-pkg             - Build both source and binary RPM kernel packages
  binrpm-pkg          - Build only the binary kernel RPM package
  deb-pkg             - Build both source and binary deb kernel packages
  bindeb-pkg          - Build only the binary kernel deb package
  snap-pkg            - Build only the binary kernel snap package
                        (will connect to external hosts)
  dir-pkg             - Build the kernel as a plain directory structure
  tar-pkg             - Build the kernel as an uncompressed tarball
  targz-pkg           - Build the kernel as a gzip compressed tarball
  tarbz2-pkg          - Build the kernel as a bzip2 compressed tarball
  tarxz-pkg           - Build the kernel as a xz compressed tarball
  perf-tar-src-pkg    - Build perf-5.15.122.tar source tarball
  perf-targz-src-pkg  - Build perf-5.15.122.tar.gz source tarball
  perf-tarbz2-src-pkg - Build perf-5.15.122.tar.bz2 source tarball
  perf-tarxz-src-pkg  - Build perf-5.15.122.tar.xz source tarball

Documentation targets:
 Linux kernel internal documentation in different formats from ReST:
  htmldocs        - HTML
  latexdocs       - LaTeX
  pdfdocs         - PDF
  epubdocs        - EPUB
  xmldocs         - XML
  linkcheckdocs   - check for broken external links
                    (will connect to external hosts)
  refcheckdocs    - check for references to non-existing files under
                    Documentation
  cleandocs       - clean all generated files

  make SPHINXDIRS="s1 s2" [target] Generate only docs of folder s1, s2
  valid values for SPHINXDIRS are: PCI RCU accounting admin-guide arm arm64 block bpf cdrom core-api cpu-freq crypto dev-tools devicetree doc-guide driver-api fault-injection fb filesystems firmware-guide fpga gpu hid hwmon i2c ia64 ide iio infiniband input isdn kbuild kernel-hacking leds livepatch locking m68k maintainer mhi mips misc-devices netlabel networking nios2 openrisc parisc pcmcia power powerpc process riscv s390 scheduler scsi security sh sound sparc spi staging target timers trace translations usb userspace-api virt vm w1 watchdog x86 xtensa

  make SPHINX_CONF={conf-file} [target] use *additional* sphinx-build
  configuration. This is e.g. useful to build with nit-picking config.

  Default location for the generated documents is Documentation/output

Architecture specific targets (arm64):
* Image.gz      - Compressed kernel image (arch/arm64/boot/Image.gz)
  Image         - Uncompressed kernel image (arch/arm64/boot/Image)
  install       - Install uncompressed kernel
  zinstall      - Install compressed kernel
                  Install using (your) ~/bin/installkernel or
                  (distribution) /sbin/installkernel or
                  install to $(INSTALL_PATH) and run lilo

  tegra_prod_defconfig        - Build for tegra_prod
  tegra_recovery_chain_defconfig - Build for tegra_recovery_chain

  make V=0|1 [targets] 0 => quiet build (default), 1 => verbose build
  make V=2   [targets] 2 => give reason for rebuild of target
  make O=dir [targets] Locate all output files in "dir", including .config
  make C=1   [targets] Check re-compiled c source with $CHECK
                       (sparse by default)
  make C=2   [targets] Force check of all c source with $CHECK
  make RECORDMCOUNT_WARN=1 [targets] Warn about ignored mcount sections
  make W=n   [targets] Enable extra build checks, n=1,2,3 where
		1: warnings which may be relevant and do not occur too often
		2: warnings which occur quite often but may still be relevant
		3: more obscure warnings, can most likely be ignored
		Multiple levels can be combined with W=12 or W=123

Execute "make" or "make all" to build all targets marked with [*] 
For further info see the ./README file

---------------------------------------------------------------------------------------------------------

cd jailhouse/include/jailhouse/cell-config.h
更改第347行的  #define JAILHOUSE_MAX_PMU2CPU_IRQ	8 （改成 16）
orin.c 文件里的 .num_pmu_irq = 12, 和 .pmu_cpu_irq = {} 都可子改成12了


cd jailhouse/hypervisor/setup.c
54,55行添加： 	error = 1;
		return;

cd jailhouse/driver/main.c
第384行添加：	pr_err("jailhouse: NEIN\n");
			return -ENODEV;
424，485,559,586,		589，	625,637

---------------------------------------------------------------------------------------------------------








































